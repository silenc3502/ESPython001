int *p1 = (int *)malloc(sizeof(int) * 3);
int *p2 = (int *)malloc(sizeof(int) * 4);

printf("p1 = 0x%x\n", p1);
printf("p2 = 0x%x\n", p2);

printf("p1 + p2 = 0x%x\n", p1 + p2); ===>>> p1->number + p2->number

*** python ***

print(obj1 + obj2) ===> obj1.__add__(obj2)
obj1 - obj2 ===> obj1.__sub__(obj2)

z1 = 3 + 4j
z2 = 4 + 2j

z3 = z1 + z2

HW 1. C언어로 파이썬에서 연산자 오버로딩을 통해 쉽게 계산할 수 있었던 복소수 연산체계를 만들어보자!
      이때 드 무아브르 법칙이 굉장히 유용하게 사용될 수 있다.
      복소수의 극좌표 형식 등등(AC 회로 - Phasor Domain): 위상
      AC 회로를 해석할 때 복소수 기반으로 해석
      DC-DC(컨버터), DC-AC(인버터) 설계에 활용된다.

HW 2. void *를 활용해서 범용성(어떤 상황에서든 동작할 수 있는) 강건한 코드를 만들어보자!
      주제가 여러가지가 될 수 있으므로 각자 한 번 생각해서 구현을 해보도록 한다.
      예) N by N 형태의 공간이 존재한다.
      여기에 배치될 물건의 크기가 2 by 2, 2 by 3, 3 by 3, 3 by 4, 5 by 2, 5 by 3 이 존재한다.
      이들을 모두 일관되게 배치할 수 있는 효율적인 방법을 찾으시오.
      뿐만 아니라 가장 공간의 낭비가 적게 만들려면 어떻게 해야하는지도 고민해보자!

struct test
{
	char attr[32];

	union data {
		~~~
	}
}

Access Control (접근 제한)

* public(공적인 공공): 공개된 정보 - 언더바 없음(제 3 자도 접근 할 수 있다)
* protected(가문의 유산): _ 언더바가 한 개(상속 구조에서 접근할 수 있으며 제 3 자는 접근 불가
* private(사적인 정보): __ 언더바가 두 개(외부에서 접근할 수 없다)

RE = Regular Expression(정규 표현식)

a-z : a ~ z까지를 의미
A-Z : A ~ Z까지를 의미
0-9 : 0 ~ 9까지를 의미

HW 3. 파이썬 클래스 2 부분의 예습 과제 두 개

HW 4. 카페에 질문 올리기(두 개)

HW 5-1. 라즈베리 SD카드 기반 부팅 진행
   5-2. 한글 설정 진행하기
   5-3. LED 키기(껏다 키기, 폴링 방식, 이벤트[인터럽트] 방식)
        Open Collector의 이점이 무엇인지 정리하기



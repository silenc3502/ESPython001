Q&A 1. Lambda는 무엇이고 함수의 이름이 없이
       함수처럼 동작하는 이유는 무엇인가요 ?

Ans: Lambda는 쉽게 생각해서 이름이 없는 익명 함수라고 생각하면 됩니다.
     그럼에도 기능을 설정하기 위한 녀석이므로 함수로 취급되며 주소값을 가집니다.
     결국 lambda로 만들어진 녀석들도 함수 포인터처럼 받아서 활용할 수 있습니다.

Q&A 2. 문자열과 리스트는 서로 다른 개념인가요 ?

Ans: 문자열은 C언어로 치면 char *에 해당하는 자료형이며
     리스트는 void *에 해당하여 여러 자료구조 형태
     혹은 구조체 형식을 담을 수 있도록 구성된 케이스입니다.
     Java로 치면 문자열은 String이 되며
     리스트는 Object로 해석해도 되고
     Collections의 ArrayList로 해석해도 된다.

Q&A 3. 어떤 함수에서 리턴을 했더니 결과가 리스트로 나오게 할 수 있는가 ?

Ans: 가능하다.
     튜플이 되는 경우는 return x, y와 같이 명시를 한 경우가 튜플이 된다.
     (리턴하는 개수는 2개로 고정이 되기 때문이다 - 변경 불가!)

Q&A 4. goto와 if, break의 차이점이 잘 이해되지 않습니다.

Ans: goto를 사용하던 if, break를 사용하던 에러가 발생하는 시점은 동일하다.
     여기서 사용하는 if는 어쩔 수 없이 한 번은 발생하게 된다.
     그러나 goto는 for Loop 내에서 추가적인 비용 낭비를 하지 않는다.
     반면 if, break는 파이프라인 및 Cache Miss를 지속적으로 발생시킨다.
     적용 해야하는 케이스를 보자면 에러 핸들링을 할 경우가 가장 대표적이다.

Q&A 5. 파이프라인 단계가 무엇인가요 ?

Ans: 제일 간단한 이론수업에서 사용하는 3단계 파이프라인 구조를 보도록 하자!
     1. Fetch
     2. Decode
     3. eXecute
     Fetch는 Instruction Cache로 실행시킬 Instruction들(어셈블리어)를 가져온다.
     Decode는 Instruction을 보고 이것이 레지스터 연산인지
     메모리 연산인지 기타 다른 연산인지 명령어 자체를 해석하는 작업이다.
     eXecute를 통해서 준비된 명령어(어셈블리어)를 실행한다.

Q&A 6. 슈퍼스칼라 프로세서에서 파이프라인은 어떤식으로 동작하나요 ?

Ans: 정말 동시에 두개씩 Fetch 된다고 보면 된다.
     Data Dependency(데이터 의존성)이 없어야만 이것이 가능하다.
     만약 의존성이 있다면 한쪽 파이프라인만 흘러가고 나머지는 Stall 된다.

Q&A 7. branch 명령어가 발생하면 파이프라인은 깨지는가 ?

Ans: 네 무조건 깨집니다.
     예외가 Branch Predictor를 통해 예방할 수도 있으나 100% 보장은 못한다.

Q&A 8. branch 명령이란 무엇인가 ?

Ans: jmp 어셈블리어를 발생시키는 모든것들
     (goto, for, if, while, 함수 호출, break, continue 등등)
     모든 제어문은 branch를 발생시킨다.

Q&A 9. goto를 실제로 쓴다고 하자!
       여러 Task들이 동작하고 있는 상황에서 에러가 발생함
       이 상황에서 goto를 사용한다면 어떻게 사용해야할까 ?

Ans: setjmp 및 longjmp를 사용하여 함수를 건너뛰어 goto를 사용할 수 있다.
     C++로 치면 try, catch, finally랑 동일한 기능이다.

Q&A 10. 재귀호출의 동작 과정 ?

Ans: 함수를 호출할 때마다 새로운 스택을 만든다는 것을 이해해야한다.
     즉 003.txt의 gdb 내용을 반드시 복습하도록 한다.

Homework:

1. 003.txt에 있는 gdb 활용법 및 복습을 꼭 해보도록 한다.
   이것을 복습해야만 C언어에서
   함수의 스택 프레임 생성과 해제를 이해할 수 있고
   이를 기반으로 함수를 호출하면
   무조건 경계선이 생성된다는 것을 이해할 수 있다.
   위의 내용들을 토대로 재귀 호출을 완벽하게 이해할 수 있게 될 것이다.
2. 문제은행 10 문제(C언어, python)
3. 예습: Exception까지(Exception 포함)
4. 이전거랑 요번거 모범답안
